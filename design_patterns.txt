* Creational Design Patterns:
- These patterns are responsible to create objects/control the creation of objects.

1. ProtoType Pattern:
- Components of the Prototype Pattern:
    Prototype: Declares an interface for cloning itself.
    Concrete Prototype: Implements the clone() method to create a new object as a copy of itself.
    Client: Uses the clone() method to create new objects.
- EXAMPLE: When we have a shape interface and concrete classes implementing this interface,
    and a ShapeCache class that stores shapes and returns their clone when requested.

2. Singleton Pattern:
- ensures a class has only one instance and provides a global point of access to that instance.
- It is used when you want to have exactly one instance of a class throughout the entire execution of your program.
- EXAMPLE: a Logger class

3. Factory Pattern:
- It provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created.
- It defines a method that should be used for creating objects rather than instantiating objects directly with a constructor call.
- EXAMPLE: using a ShapeFactory that generates different types of shapes.

4. Abstract Factory Pattern:
- It provides an interface for creating families of related or dependent objects without specifying their concrete classes.
- EXAMPLE: using a GUI Factory that generates different types of components for different operating systems (Windows and macOS).

5. Builder Pattern:
- is used to construct complex objects step by step.
- It allows you to produce different types and representations of an object using the same construction code.
- EXAMPLE: constructing a User object with optional parameters.

6. Object Pool Pattern:
- It manages a pool of reusable objects. When a client requests an object, it provides one from the pool if available, or creates a new one if none are available.
- When the client is done with the object, it is returned to the pool for future use.
- This pattern is useful for managing resources that are expensive to create or that have a limited supply.
- This pattern is used with singleton pattern, and requires thread safety while acquiring and releasing the resources.
- EXAMPLE: a database connection pool, a thread pool


* Structural Design Patterns:
- It is a way to combine or arrange different classes and objects to form a complex or bigger structure to solve
a particular requirement.

1. Decorator Pattern:
- It allows behavior to be added to individual objects, either statically or dynamically, without affecting the behavior of other objects from the same class.
- It is used to extend or alter the functionality of objects at runtime by wrapping them in an object of a decorator class.
- This pattern is useful when you need to add responsibilities to objects without subclassing.
- EXAMPLE: a coffee ordering system, where we can dynamically add condiments (decorators) to a base coffee object.
    a pizza ordering system (toppings decorator)

2. Proxy Pattern:
- It allows you to create a substitute or placeholder for another object to control access to it.
- This pattern is used when creating an object is expensive or requires a lot of resources.
- EXAMPLE: using an Image interface and its proxy to prevent the real loading of heavy RealImage objects until they are required.

3. Composite Pattern:
- It allows you to work with individual objects and compositions of objects in a similar manner.
- EXAMPLE: a company hierarchy where we have employees and departments.
    Departments can be composed of both individual employees and other departments.
    - File System (files and folders containing files/subfolders)

4. Adapter Pattern:
- It allows objects with incompatible interfaces to work together.
- It acts as a bridge between two incompatible interfaces, converting the interface of a class into another interface clients expect.
- EXAMPLE: Having a legacy weight machine class that returns weight in pounds, and implementing a
    weight machine adapter that gets the weight in pounds and converts it in kgs before returning to the client.

5. Bridge Pattern:
- It decouples an abstractions from its implementations, allowing them to vary independently.
- It promotes OPEN/CLOSED principle.
- EXAMPLE: shapes (abstraction) and drawing APIs (implementation).
    We'll have different shapes (such as Circle and Square) and different drawing APIs (such as SVG and Canva),
    and the Bridge pattern will allow us to draw any shape using any drawing API.

6. Facade Pattern:
- It provides a simplified interface to a larger body of code, such as a complex subsystem or set of interfaces.
- It hides the complexities of the subsystem and provides an easier interface to work with.
- EXAMPLE: a multimedia player that simplifies the interface for playing different types of multimedia (audio and video).

7. Flyweight Pattern:
- It is used to minimize memory usage and improve performance by sharing objects that are frequently used across multiple contexts.
- It achieves this by storing intrinsic (immutable) state externally, and intrinsic state is passed to the flyweight object when needed.
- EXAMPLE: a text editor where we reuse characters that have already been created instead of creating new ones.
- The Flyweight pattern is particularly useful when dealing with a large number of objects that have overlapping state,
especially when objects are heavy and memory consumption is a concern.


* Behavioral Design Patterns:
- Guides how different objects communicate with each other effectively, distribute tasks efficiently,
  making the system easy to maintain.

1. State Pattern
- Allows the object to alter its behavior when it internal state changes.
- When we have many states with many possible transitions from one state to another, we can use state pattern.
- NOTE: In case there are many states but the order of change is fixed/linear with no alternate transitions,
then it's better to use FSM (Finite State Machine). In that, we take a static final Map and populate it with the
allowed transitions in the static initializer block. Then our entity just need one method called transitionTo(State)
which checks whether it's possible to transition from the current state to the given state. If yes, it updates
the state.
- Components of the State Pattern:
    Context: Defines the interface of interest to clients. It maintains an instance of a ConcreteState subclass that defines the current state.
    State: Interface or abstract class that defines a set of methods for handling different states.
    Concrete State: Each subclass implements behavior associated with a specific state of the Context.
- EXAMPLE: TCP connection that can be in different states (Closed, Established, Listening, etc.) and each state determines how the connection responds to events.
    Vending Machine

2. Observer Pattern
- In this, an object called Observable maintains a list of dependents/Observers and notifies them of any changes
in its state.
- Components of the Observer Pattern:
    Subject: Maintains a list of observers, provides methods to add or remove observers, and notifies observers of changes in its state.
    Observer: Interface or abstract class defining the method that should be called whenever the subject's state changes.
    Concrete Subject: Inherits from the Subject and implements specific business logic methods that can trigger notifications to observers.
    Concrete Observer: Implements the Observer interface and defines the method to handle notifications from the subject.
- EXAMPLE: a weather station that notifies various display devices whenever the weather conditions change.

3. Strategy Pattern
- It is used when we have some overlapping implementations among the children of a given parent class. By using strategy
pattern, we can remove this code repetition.
- It allows to alter the behavior of the object by allowing an ease of change for altering the underlying algorithm
to perform certain operation.
- Components of the Strategy Pattern:
    Strategy: Interface or abstract class that defines the algorithm's contract.
    Concrete Strategies: Implementations of the Strategy interface, providing different algorithms.
    Context: Maintains a reference to a Strategy object and can execute the algorithm defined by the Strategy.
- EXAMPLE: a payment processing system that can accept payments through different payment methods (Credit Card, PayPal, and Google Pay).

4. Chain of Responsibility Pattern
- It is used in cases where we receive a request from a client, and we have a chain of handlers to handle
  any given request. We don't know which handler will handler/s a given request.
  Example: Design ATM, Vending Machine, Logger
  In case of an ATM: we can consider a chain of handlers each referring to currency denomination, meaning handlers
  for notes of Rs. 2000, 500, 100, 50, etc.
  Now, given a request to withdraw some amount X, the request goes through this chain of handlers to extract
  the given amount.
- Design a Logger
  Chain of Responsibility (COR) pattern makes sense to design a logger since in loggers like log4j we have
  different levels of logging with certain order: ALL < DEBUG < INFO < WARN < ERROR < FATAL < OFF
  In such cases, maintaining an if-else ladder along with multiple objects for different levels of logging can be
  cumbersome. COR pattern keeps it clean and maintainable.
- Components of the Chain of Responsibility Pattern:
    Handler: Defines an interface for handling requests and optionally implements the successor link (reference to the next handler in the chain).
    Concrete Handler: Handles requests it is responsible for. It can also access its successor and forward requests it cannot handle.
    Client: Initiates the request to a Concrete Handler object on the chain.
- EXAMPLE: different levels of support staff handle customer service requests based on their level of authority.
    Logger (slf4j), ATM

5. Template Pattern
- It is used when there is a particular chain/order of steps required to be followed in order to execute a given task.
- It hides the internal implementation/complexity of the system by defining a final method as a template.
- It ensures that a certain order of operations is followed by each of the children.
- Components of the Template Method Pattern:
    Abstract Class: Defines the skeleton of an algorithm in an operation, called the template method.
            It may also include concrete methods that are used by the template method.
    Concrete Class: Implements the abstract operations to carry out subclass-specific steps of the algorithm.
- EXAMPLE: preparing different types of beverages -> Coffee Machine

6. Interpreter Pattern
- It defines a grammar for interpreting and evaluating an expression.
- Components of the Interpreter Pattern:
    Abstract Expression: Declares an abstract interpret() method that is implemented by concrete expressions.
    Terminal Expression: Implements the interpret() method for terminal symbols in the language.
    Non-terminal Expression: Implements the interpret() method for non-terminal symbols in the language.
    Context: Contains information that is global to the interpreter.
    Client: Builds (or is provided with) an abstract syntax tree (AST) and invokes the interpret operation.
- EXAMPLE: to interpret and evaluate arithmetic expressions.

7. Command Pattern
- It turns the requests from clients (commands) into objects, allowing us to either parameterize or queue them.
- It helps to decouple the sender and receiver.
- Imagine a particular command involving a series of operations to be performed. Without the command pattern,
the client needs to be aware of all those operations. Also, if some operations are added/removed/modified, then
the clients are affected.
- Instead, the command pattern creates concrete classes for each command and decouples the senders from the receiver.
- Components of the Command Pattern:
    Command: Declares an interface for executing an operation.
    Concrete Command: Defines a binding between a Receiver object and an action.
    Receiver: Knows how to perform the operations associated with carrying out a request.
    Invoker: Asks the command to carry out the request.
    Client: Creates a Concrete Command object and sets its receiver.
- EXAMPLE: using a remote control that can turn on/off a light and adjust its brightness.
    AC, TV

8. Iterator Pattern
- It provides a way to access elements of a collection sequentially without exposing the underlying representation
of the collection.
- It includes creating an Iterator interface with hasNext() and next() methods. Then, we need to create a custom iterator
class that implements this interface. Now, in our custom collection class we need to return the instance of this
custom iterator.
- Components of the Iterator Pattern:
    Iterator: Defines an interface for accessing and traversing elements.
    Concrete Iterator: Implements the Iterator interface and keeps track of the current position in the traversal of the aggregate.
    Aggregate: Defines an interface for creating an Iterator object.
    Concrete Aggregate: Implements the Aggregate interface and creates an Iterator object.

9. Visitor Pattern
- It allows adding new behaviors to existing object structures without modifying those structures.
- It promotes OPEN/CLOSED principle.
- Components of the Visitor Pattern:
  Visitor Interface: Declares a visit method for each type of element in the object structure.
  Concrete Visitor: Implements each operation declared by the Visitor interface.
        Each operation implements a fragment of the algorithm defined for the corresponding class of object in the structure.
  Element: Defines an accept method that takes a visitor as an argument.
  Concrete Element: Implements the accept method defined by the Element interface.
  Object Structure: Contains a collection of objects that may be visited by the visitor.
- EXAMPLE: Let's say we have a structure of different shapes (elements) like Circle, Rectangle, and Triangle,
    and we want to calculate the area and the perimeter of each shape using the Visitor pattern.

10. Mediator Pattern
- It encourages loose coupling by not allowing the objects to refer to each other directly. It places a Mediator
object in between and allows communications only through mediator object.
- Example: Auction System (Bidders communicate via host)
- Components of the Mediator Pattern:
    Mediator: Defines an interface for communication between colleague objects.
    Concrete Mediator: Implements the Mediator interface and coordinates communication between colleague objects.
    Colleague: Defines an interface for communication with other colleagues through the Mediator.
    Concrete Colleague: Implements the Colleague interface and communicates with other colleagues through the Mediator.
- EXAMPLE: an air traffic control (ATC) system where planes communicate and coordinate with each other through the ATC mediator.

11. Memento Pattern
- It provides an ability to revert an object to its previous state i.e. UNDO operation without exposing the object's
internal structure/implementation.
- Components of the Memento Pattern:
    Originator: The object whose state needs to be saved and restored.
    Memento: An object that stores the snapshot of the state of the Originator.
    Caretaker: Responsible for keeping the history Memento but does not operate on or examine the contents of the Memento.
- EXAMPLE: a text editor where we want to save and restore the state of a document using the Memento pattern.
